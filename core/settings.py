"""
Django settings for Requisition project.

Generated by 'django-admin startproject' using Django 5.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from django.contrib.messages import constants as messages
from dotenv import load_dotenv
from mongoengine import connect
from pathlib import Path
from str2bool import str2bool
import os
import secrets

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

ENVIRONMENT = os.environ.get("ENVIRONMENT", "DEVELOPMENT")
APP_URL = 'http://localhost:8152/'
if ENVIRONMENT == "PRODUCTION":
    APP_URL = 'https://solicitudes.arvii.com.co/'

from .project import *

DATABASE_NAME = os.getenv('DATABASE_NAME','requisitiondb')
DATABASE_URL = os.getenv('DATABASE_URL','localhost')
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = str2bool(os.environ.get('DEBUG'))
DEBUG = True
try:
    from .settings_debug import *
except:
    pass

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get(
    "DJANGO_SECRET_KEY",
    default=secrets.token_urlsafe(nbytes=64),
)


if DEBUG:
    ALLOWED_HOSTS = ['*']
else:
    ALLOWED_HOSTS = ['*']

# Add here your deployment HOSTS
CSRF_TRUSTED_ORIGINS = ['http://localhost:8150', 'http://127.0.0.1:8152']

RENDER_EXTERNAL_HOSTNAME = os.environ.get('RENDER_EXTERNAL_HOSTNAME', '')
if RENDER_EXTERNAL_HOSTNAME:    
    ALLOWED_HOSTS.append(RENDER_EXTERNAL_HOSTNAME)

# Application definition

DJANGO_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    'django.contrib.humanize',
]

EXTERNAL_APPS = [
    "django_mongoengine",
    "django_mongoengine.mongo_auth",
    "django_mongoengine.mongo_admin",
    'theme_soft_design',
    'django_extensions',
    'mathfilters',
    'fileprovider',
    # "bootstrap",
    'bootstrap_datepicker_plus',
]

MODULES_APPS = [
    'modules.localization.apps.LocalizationConfig',
    'modules.authentication.apps.AuthenticationConfig',
    'modules.parameters.apps.ParametersConfig',
    'modules.base.apps.BaseConfig',
    'modules.operative.apps.OperativeConfig',
]

INSTALLED_APPS = [
    'core',
    'home'
]

INSTALLED_APPS += DJANGO_APPS
INSTALLED_APPS += EXTERNAL_APPS
INSTALLED_APPS += MODULES_APPS

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "fileprovider.middleware.FileProviderMiddleware",
]

ROOT_URLCONF = "core.urls"

# HOME_TEMPLATES = os.path.join(BASE_DIR, 'home', 'templates')

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "core.template_processor.generic_variables",
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "core.wsgi.application"

ASGI_APPLICATION = "core.asgi.application"

USE_TZ = True

# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {"default": {'ENGINE': 'django.db.backends.dummy',}}

MONGODB_DATABASES = {
    "default": {
        "name": DATABASE_NAME,
        "url": DATABASE_URL,
        "tz_aware": USE_TZ, # if you using timezones in django (USE_TZ = True)
    },
}

for database_key, database_conf in MONGODB_DATABASES.items():
    connect(
        alias=database_key, 
        db=database_conf['name'],
        host=database_conf['url']
    )


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

AUTH_USER_MODEL = "mongo_auth.MongoUser"

AUTHENTICATION_BACKENDS = ("django_mongoengine.mongo_auth.backends.MongoEngineBackend",)

SESSION_ENGINE = "django_mongoengine.sessions"

# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "es"

TIME_ZONE = "America/Bogota"
COUNTRY = 'CO'

USE_I18N = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'

# A sample logging configuration. The only tangible logging
# performed by this configuration is to send an email to
# the site admins on every HTTP 500 error when DEBUG=False.
# See http://docs.djangoproject.com/en/dev/topics/logging for
# more details on how to customize your logging configuration.
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "filters": {"require_debug_false": {"()": "django.utils.log.RequireDebugFalse"}},
    "handlers": {
        "mail_admins": {
            "level": "ERROR",
            "filters": ["require_debug_false"],
            "class": "django.utils.log.AdminEmailHandler",
        }
    },
    "loggers": {
        "django.request": {
            "handlers": ["mail_admins"],
            "level": "ERROR",
            "propagate": True,
        },
    },
}

ITEMS_PER_PAGE = 4

JWT_ALGORITHM = 'HS256'

MESSAGE_TAGS = {
    messages.DEBUG: 'alert-dark',
    messages.INFO: 'alert-info',
    messages.SUCCESS: 'alert-success',
    messages.WARNING: 'alert-warning',
    messages.ERROR: 'alert-error-custom',
}

FILEPROVIDER_NAME = "python"

BOOTSTRAP_DATEPICKER_PLUS = {
    # Options for all input widgets
    # More options: https://getdatepicker.com/4/Options/
    "options": {
        "locale": "es-mx",
        # "showClose": True,
        # "showClear": True,
        "showTodayButton": True,
        # "allowInputToggle": True,
    },
    # You can set date and event hook options using JavaScript, usage in README.
    # You can also set options for specific variant widgets only which overrides above options.
    "variant_options": {
        "date": {
            "format": "YYYY-MM-DD",
        },
        "datetime": {
            "format": "YYYY-MM-DD HH:mm",
        },
        "month": {
            "format": "MMMM, YYYY",
        },
    },
    #
    # HTML attributes for widget <input> element
    "attrs": {
        "class": "input",
    },
    #
    # Override input addon icon classes
    "addon_icon_classes": {
        "month": "bi-calendar-month",
    },
}

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER','admin@arvii.com.co')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD','odroztabyagkpztz')
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_USE_SSL = False
